########################################################
####################   Clean Up   ######################
########################################################

1. No unnecessary comparisons
        * bad:
        if(user.isLoggedIn() == true) {}

        * improved:
        if(user.isLoggedIn()) {}


2. Avoid Negations
    - always try to code things the positive way
    - avoid "!" and negated expressions

        * bad:
        if(user.isNotLoggedIn()) {}
        if(!user.loggedIn()) {}

        * improved
        if(user.isLoggedIn()) {}


3. Return Boolean directly
    - in methods

        * bad
        if(user.isLoggedIn()) {
            return true;
        } else {
            return false;
        }

        * improved
        return user.isLoggedIn();


4. Simplify Booleans
    - group and simplify boolean expression to be more readable
    - grouped boolean expressions can be assigned to a variable or method

        * bad
        if(user.isAwake() && car.wheels == 4 && car.fuel > 0 && (weather.temp > 20 || weather.isGood()) {}

        * improved
        boolean isCarReady = car.wheels == 4 && car.fuel > 0
        private boolean isWeatherOk() {
            weather.temp > 20 || weather.isGood()
        }

        if(user.isAwake() && isCarReady && isWeatherOk()) {}


5. Avoid NullPointerExceptions
    - check method parameters for null _before_ calling methods on them
    - passing null to a parameter is _bad practice_ instead, use method overloading instead

        * bad
        user.setInfo(street, null, null);

        * improved
        user.setInfo(street);

        public void setInfo(String street) {
            this.setInfo(String street)
        }


6. Overloaded constructors
    - overloaded constructors should be private
    - access to this constructors should only be granted through static factory methods
        public static fromUsername(String username) {
            // call constructor
        }


7. Beware of Switch fallthrough
    - always add a break to cases to prevent fallthrough


8. Always use curly braces
    - if clauses also can have fallthrough cases if the curly braces are omitted
    - always use curly braces in if clauses
    - less code is not always better, the more readable code is better


9. Ensure Code Symmetry
- all parts of an if/else-Block should handle the same concern and should have the same structure
- if parts of the if/else-Block handle different concerns devide them in additional blocks

